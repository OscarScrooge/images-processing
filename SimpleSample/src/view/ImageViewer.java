package view;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import org.opencv.core.Core;
import static org.opencv.core.Core.BORDER_REFLECT_101;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import simplesample.ImageProcessor;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Administrator
 */
public class ImageViewer extends javax.swing.JFrame {

    /**
     * Creates new form ImageViewer
     */
    Mat image;

    public ImageViewer(Mat image) {

        initComponents();

        this.image = image;
        
//        Mat myImage= new Mat(1419,389, CvType.CV_8UC3);
//        
//        for(int i=0;i<myImage.rows();i++){
//            for(int j=0;j<myImage.cols();j++){
//                int n1= (int) (Math.random()*255);
//                int n2= (int) (Math.random()*255);
//                int n3= (int) (Math.random()*255);
////                System.err.println("n1="+n1+" n2="+n2+" n3="+n3);
//                myImage.put(i, j, new double[]{n1,n2,n3});
//            }
//        }
        
        setImage(this.image);
        ImageProcessor imageProcessor = new ImageProcessor();   

    }

    public Image toBufferedImage(Mat matrix) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (matrix.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = matrix.channels() * matrix.cols() * matrix.rows();
        byte[] buffer = new byte[bufferSize];
        matrix.get(0, 0, buffer); // get all the pixels
        BufferedImage image = new BufferedImage(matrix.cols(), matrix.
                rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().
                getDataBuffer()).getData();
        System.arraycopy(buffer, 0, targetPixels, 0, buffer.length);
        return image;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showImage = new javax.swing.JLabel();
        sliderLabel = new javax.swing.JSlider();
        setupButton = new javax.swing.JButton();
        jRadioButton_Blur = new javax.swing.JRadioButton();
        jRadioButton_Gaussian = new javax.swing.JRadioButton();
        jRadioButton_Median = new javax.swing.JRadioButton();
        jRadioButton_Bilateral = new javax.swing.JRadioButton();
        pix_manipulation = new javax.swing.JRadioButton();
        addNoise = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showImageMousePressed(evt);
            }
        });

        sliderLabel.setMajorTickSpacing(2);
        sliderLabel.setMaximum(10);
        sliderLabel.setMinorTickSpacing(1);
        sliderLabel.setPaintLabels(true);
        sliderLabel.setPaintTicks(true);
        sliderLabel.setValue(0);
        sliderLabel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderLabelStateChanged(evt);
            }
        });

        setupButton.setText("Clear");
        setupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupButtonActionPerformed(evt);
            }
        });

        jRadioButton_Blur.setText("Blur");
        jRadioButton_Blur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_BlurActionPerformed(evt);
            }
        });

        jRadioButton_Gaussian.setText("Gaussian");
        jRadioButton_Gaussian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_GaussianActionPerformed(evt);
            }
        });

        jRadioButton_Median.setText("Median");
        jRadioButton_Median.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_MedianActionPerformed(evt);
            }
        });

        jRadioButton_Bilateral.setText("Bilateral");
        jRadioButton_Bilateral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_BilateralActionPerformed(evt);
            }
        });

        pix_manipulation.setText("Pixels manipulation");
        pix_manipulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pix_manipulationActionPerformed(evt);
            }
        });

        addNoise.setText("Add noise");
        addNoise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoiseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(showImage, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(setupButton)))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jRadioButton_Blur)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton_Gaussian)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton_Median)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton_Bilateral)
                .addGap(18, 18, 18)
                .addComponent(pix_manipulation)
                .addGap(18, 18, 18)
                .addComponent(addNoise)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Blur)
                    .addComponent(jRadioButton_Gaussian)
                    .addComponent(jRadioButton_Median)
                    .addComponent(jRadioButton_Bilateral)
                    .addComponent(pix_manipulation)
                    .addComponent(addNoise))
                .addGap(70, 70, 70)
                .addComponent(sliderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(showImage, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(setupButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sliderLabelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderLabelStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider) evt.getSource();
        int level = (int) source.getValue();
        ImageProcessor imageProcessor = new ImageProcessor();        
        Mat output = imageProcessor.blur(this.image, level);
        setImage(output);
//        this.repaint();
    }//GEN-LAST:event_sliderLabelStateChanged

    private void showImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showImageMousePressed
        // TODO add your handling code here:

        Imgproc.circle(image, new Point(evt.getX(), evt.getY()), 20, new Scalar(0, 0, 255), 4);
        setImage(image);
//        this.repaint();

    }//GEN-LAST:event_showImageMousePressed

    private void setupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupButtonActionPerformed
        // TODO add your handling code here:
        Image originalImage = toBufferedImage(this.image);
              showImage.setIcon(new ImageIcon(originalImage.getScaledInstance(this.showImage.getWidth(),this.showImage.getHeight(), Image.SCALE_DEFAULT)));
    }//GEN-LAST:event_setupButtonActionPerformed

    private void jRadioButton_BlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_BlurActionPerformed
        // TODO add your handling code here: 
        Mat des = new Mat();
        Imgproc.blur(this.image, des, new Size(10.0, 10.0), new Point(4, 5), BORDER_REFLECT_101);        
        setImage(des);
    }//GEN-LAST:event_jRadioButton_BlurActionPerformed

    private void jRadioButton_GaussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_GaussianActionPerformed
        // TODO add your handling code here:
        Mat des = new Mat();
//        double sigma = 0.3*((new Size(3.0, 3.0-1)*0.5 - 1) + 0.8;
        Imgproc.GaussianBlur(this.image, des, new Size(3.0, 3.0),0);
        setImage(des);
    }//GEN-LAST:event_jRadioButton_GaussianActionPerformed

    private void jRadioButton_MedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_MedianActionPerformed
        // TODO add your handling code here:
        Mat des = new Mat();
//        double sigma = 0.3*((new Size(3.0, 3.0-1)*0.5 - 1) + 0.8;
        Imgproc.medianBlur(this.image, des,5);
        setImage(des);
    }//GEN-LAST:event_jRadioButton_MedianActionPerformed

    private void jRadioButton_BilateralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_BilateralActionPerformed
        // TODO add your handling code here:
         Mat des = new Mat();
//        double sigma = 0.3*((new Size(3.0, 3.0-1)*0.5 - 1) + 0.8;
        Imgproc.bilateralFilter(this.image, des,20,15.0,50);
        setImage(des);
    }//GEN-LAST:event_jRadioButton_BilateralActionPerformed

    private void pix_manipulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pix_manipulationActionPerformed
      
         Mat des = new Mat();
//        double sigma = 0.3*((new Size(3.0, 3.0-1)*0.5 - 1) + 0.8;
                
        int totalBytes = (int) (image.total() * image.elemSize());
        byte buffer[] = new byte[totalBytes];
        image.get(0, 0, buffer);
        for (int i = 0; i < totalBytes; i++) {
            if (i % 3 == 0) {
                buffer[i] = 0;
            }
        }
        image.put(0, 0, buffer);
        
        setImage(this.image);        
    }//GEN-LAST:event_pix_manipulationActionPerformed

    private void addNoiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoiseActionPerformed
        // TODO add your handling code here:
        this.addNoise();
    }//GEN-LAST:event_addNoiseActionPerformed

    private void addNoise() {
        
        Mat grayRnd = new Mat(this.image.rows(),this.image.cols(),this.image.type());
        double noise = 128;
        grayRnd.setTo(new Scalar(noise / 2, noise / 2, noise / 2));
        Core.subtract(this.image, grayRnd,this.image);
        Core.randu(grayRnd, 10, noise);
        Core.add(this.image, grayRnd,this.image);  
        
        setImage(grayRnd);
    }
    
    private void setImage(Mat customImage){
    
              Image loadedImage = toBufferedImage(customImage);        
              showImage.setIcon(new ImageIcon(loadedImage.getScaledInstance(this.showImage.getWidth(),this.showImage.getHeight(), Image.SCALE_DEFAULT)));
    
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new ImageViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton addNoise;
    private javax.swing.JRadioButton jRadioButton_Bilateral;
    private javax.swing.JRadioButton jRadioButton_Blur;
    private javax.swing.JRadioButton jRadioButton_Gaussian;
    private javax.swing.JRadioButton jRadioButton_Median;
    private javax.swing.JRadioButton pix_manipulation;
    private javax.swing.JButton setupButton;
    private javax.swing.JLabel showImage;
    private javax.swing.JSlider sliderLabel;
    // End of variables declaration//GEN-END:variables
}
